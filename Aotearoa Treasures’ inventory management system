#include "D:\Users\270464698\source\repos\Bee Zee Tester\Header1.h"
using namespace std;

string currentUsername = "";
string currentUserRole = "";
unordered_map<string, Branch> branches;

bool isVaildText(const string& input) {
    for (char c : input) {
        if (!isalpha(c) && c != ' ')
            return false;
    }
    return true;
}

vector<User> loadUsers() {
    vector<User> users;
    ifstream file("users.txt");
    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        string username, password, role;
        getline(ss, username, ',');
        getline(ss, password, ',');
        getline(ss, role, ',');
        users.push_back({ username, password, role });
    }
    return users;
}

void saveUser(const User& user) {
    ofstream file("users.txt", ios::app);
    file << user.username << "," << user.password << "," << user.role << endl;
}

void saveAllUsers(const vector<User>& users) {
    ofstream file("users.txt");
    for (const auto& user : users) {
        file << user.username << "," << user.password << "," << user.role << endl;
    }
}

bool userExists(const vector<User>& users, const string& username) {
    for (const auto& user : users) {
        if (user.username == username) return true;
    }
    return false;
}
// Stock file functions
void saveStockToFile() {
    ofstream file("stock.txt");
    for (const auto& branchPair : branches) {
        const string& branchName = branchPair.first;
        const Branch& branch = branchPair.second;
        for (const auto& item : branch.stock) {
            file << branchName << "," << item.name << "," << item.quantity << "," << item.price << endl;
        }
    }
    file.close();
}
void loadStockFromFile() {
    ifstream file("stock.txt");
    if (!file.is_open()) return; // File doesn't exist yet
    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        string branchName, itemName, quantityStr, priceStr;
        getline(ss, branchName, ',');
        getline(ss, itemName, ',');
        getline(ss, quantityStr, ',');
        getline(ss, priceStr, ',');
        if (!branchName.empty() && !itemName.empty()) {
            int quantity = stoi(quantityStr);
            double price = stod(priceStr);
            StockItem item(itemName, quantity, price);
            branches[branchName].addStockItem(item, true); // silent = true
        }
    }
    file.close();
}
// Staff file functions
void saveStaffToFile() {
    ofstream file("staff.txt");
    for (const auto& branchPair : branches) {
        const string& branchName = branchPair.first;
        const Branch& branch = branchPair.second;
        for (const auto& member : branch.staff) {
            file << branchName << "," << member.name << "," << member.role << "," << member.schedule << endl;
        }
    }
    file.close();
}
void loadStaffFromFile() {
    ifstream file("staff.txt");
    if (!file.is_open()) return; 
    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        string branchName, staffName, staffRole, staffSchedule;
        getline(ss, branchName, ',');
        getline(ss, staffName, ',');
        getline(ss, staffRole, ',');
        getline(ss, staffSchedule, ',');
        if (!branchName.empty() && !staffName.empty()) {
            Staff member(staffName, staffRole, staffSchedule);
            branches[branchName].addStaff(member, true); 
        }
    }
    file.close();
}
void registerUser() {
    string username, password;
    vector<User> users = loadUsers();
    cout << "Please enter username:\n";
    cin >> username;
    if (userExists(users, username)) {
        cout << "This username already exists. Please enter another username.\n";
        return;
    }
    cout << "Please enter the password:\n";
    cin >> password;

    if (password.length() < 4) {
        cout << "Password must be at least 4 characters long.\n";
        return;
    }

    saveUser({ username, password, "User" });
    cout << "Registration successful!\n";
}

StockItem::StockItem() : name(""), quantity(0), price(0.0) {}
StockItem::StockItem(string n, int q, double p) : name(n), quantity(q), price(p) {}
bool StockItem::isLowStock() const {
    return quantity < 5;
}

bool StockItem::reduceQuantity(int amount) {
    if (amount <= 0 || amount > quantity)
        return false;
    quantity -= amount;
    return true;
}   

void StockItem::display(bool showLowStock) const {
    cout << fixed << setprecision(2);
    cout << "Name: " << name << " | Quantity: " << quantity << " | Price: $" << price;
    if (showLowStock && isLowStock()) {
        cout << " <-- LOW STOCK!";
    }
    cout << endl;
}

Staff::Staff() : name(""), role(""), schedule("") {}
Staff::Staff(string n, string r, string s) : name(n), role(r), schedule(s) {}
void Staff::display() const {
    cout << "- " << name << " | Role: " << role << " | Schedule: " << schedule << endl;
}

Branch::Branch() {}
string Branch::toLowerCase(string str) {
    transform(str.begin(), str.end(), str.begin(), ::tolower);
    return str;
}
// Add stock item
void Branch::addStockItem(StockItem item, bool silent) {
    for (auto& s : stock) {
        if (toLowerCase(s.name) == toLowerCase(item.name)) {
            s.quantity += item.quantity;
            if (!silent) cout << "Stock updated: " << item.name << " now has quantity " << s.quantity << endl;
            return;
        }
    }
    stock.push_back(item);
    if (!silent) cout << "Stock item added: " << item.name << endl;
}

    StockItem* Branch::findStockItem(string name) {
    for (auto& s : stock) {
        if (toLowerCase(s.name) == toLowerCase(name)) return &s;
    }
    return nullptr;
}
// Remove stock item
bool Branch::removeStockItem(string name) {
    auto it = remove_if(stock.begin(), stock.end(), [&](StockItem& s) {
        return toLowerCase(s.name) == toLowerCase(name);
        });
    if (it != stock.end()) {
        stock.erase(it, stock.end());
        return true;
    }
    return false;
}

void Branch::addStaff(Staff member, bool silent) {
    // Check if staff already exists
    for (const auto& s : staff) {
        if (toLowerCase(s.name) == toLowerCase(member.name)) {
            if (!silent) cout << "Staff member " << member.name << " already exists in this branch.\n";
            return;
        }
    }
    staff.push_back(member);
    if (!silent) cout << "Staff member " << member.name << " added successfully.\n";
}
Staff* Branch::findStaff(string name) {
    for (auto& s : staff) {
        if (toLowerCase(s.name) == toLowerCase(name)) {
            return &s;
        }
    }
    return nullptr;
}

bool Branch::removeStaff(string name) {
    auto it = remove_if(staff.begin(), staff.end(), [&](Staff& s) {
        return toLowerCase(s.name) == toLowerCase(name);
        });
    if (it != staff.end()) {
        staff.erase(it, staff.end());
        return true;
    }
    return false;
}
void Branch::displayStaff() {
    if (staff.empty()) {
        cout << "No staff members in this branch.\n";
        return;
    }
    cout << "Staff Members:\n";
    for (auto& member : staff) {
        member.display();
    }
}
void Branch::displayStock(bool showLowStock) {
    if (stock.empty()) {
        cout << "No stock items in this branch.\n";
        return;
    }
    cout << "Stock Items:\n";
    for (auto& item : stock) {
        item.display(showLowStock);
    }
}



void clearInput() {
    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
}

void printSeparator(char c = '=', int length = 50) {
    cout << string(length, c) << '\n';
}

bool getConfirmation(string message) {
    cout << message << " (y/n): ";
    char response;
    cin >> response;
    return (response == 'y' || response == 'Y');
}

void initializeBranches() {
    branches["Auckland"] = Branch();
    branches["Wellington"] = Branch();
    branches["Christchurch"] = Branch();
    
    loadStockFromFile();
    loadStaffFromFile();
    
    if (branches["Auckland"].stock.empty()) {
        branches["Auckland"].addStockItem({ "Hand Cream", 10, 19.99 }, true);
        branches["Auckland"].addStockItem({ "Kiwi Toys", 5, 34.99 }, true);
        branches["Wellington"].addStockItem({ "Fridge Magnet", 12, 6.99 }, true);
        branches["Christchurch"].addStockItem({ "Wool Scarf", 7, 129.00 }, true);
    }
    if (branches["Auckland"].staff.empty()) {
        branches["Auckland"].addStaff(Staff("Jett", "Manager", "Mon-Fri 9am-5pm"), true);
        branches["Auckland"].addStaff(Staff("Phoenix", "Cashier", "Tue-Sat 10am-6pm"), true);
        branches["Wellington"].addStaff(Staff("Sage", "Sales Assistant", "Mon-Fri 8am-4pm"), true);
        branches["Wellington"].addStaff(Staff("Sova", "Manager", "Wed-Sun 11am-7pm"), true);
        branches["Christchurch"].addStaff(Staff("Viper", "Cashier", "Mon-Fri 9am-5pm"), true);
        branches["Christchurch"].addStaff(Staff("Omen", "Craftsperson", "Tue-Sat 10am-6pm"), true);
    }
}
// === ADMIN FUNCTIONS ===

void promoteUserToAdmin() {
    vector<User> users = loadUsers();

    if (users.empty()) {
        cout << "No registered users found.\n";
        return;
    }

    cout << "\n=== User Promotion to Admin ===\n";
    cout << "Current registered users:\n";

    // Display all non-admin users
    vector<User> regularUsers;
    for (const auto& user : users) {
        if (user.role == "User") {
            regularUsers.push_back(user);
            cout << "- " << user.username << " (Role: " << user.role << ")\n";
        }
    }

    if (regularUsers.empty()) {
        cout << "No regular users available for promotion. All users are already admins.\n";
        return;
    }

    string usernameToPromote;
    cout << "\nEnter username to promote to admin: ";
    cin >> usernameToPromote;

    // Find the user and promote them
    bool userFound = false;
    for (auto& user : users) {
        if (user.username == usernameToPromote) {
            userFound = true;
            if (user.role == "Admin") {
                cout << "User " << usernameToPromote << " is already an admin.\n";
                return;
            }

            if (getConfirmation("Are you sure you want to promote " + usernameToPromote + " to admin?")) {
                user.role = "Admin";
                saveAllUsers(users);
                cout << "User " << usernameToPromote << " has been successfully promoted to admin!\n";
            }
            else {
                cout << "Promotion cancelled.\n";
            }
            return;
        }
    }

    if (!userFound) {
        cout << "User " << usernameToPromote << " not found.\n";
    }
}

void viewStockLevels() {
    cout << "\n=== All Branch Stock Levels ===\n";
    for (auto& pair : branches) {
        cout << "\nBranch: " << pair.first << endl;
        pair.second.displayStock(true); // showLowStock = true
    }
}

void addStockItem() {
    string branchName, name;
    int quantity;
    double price;
    saveStockToFile();

    cout << "Enter branch name: ";
    cin >> branchName;
    if (branches.find(branchName) == branches.end()) {
        cout << "Branch not found.\n";
        return;
    }

    cout << "Enter product name: ";
    cin.ignore();
    getline(cin, name);

    if (!isVaildText(name)) {
        cout << "Invaild product name! Only alphabetic characters are allowed.\n";
        return;
    }

    cout << "Enter quantity: ";
    cin >> quantity;
    cout << "Enter price: ";
    cin >> price;

    StockItem item(name, quantity, price);
    branches[branchName].addStockItem(item);
}

void updateStockItem() {
    string branchName, name;
    cout << "Enter branch name: ";
    cin >> branchName;
    if (branches.find(branchName) == branches.end()) {
        cout << "Branch not found.\n";
        return;
        saveStockToFile();
    }

    cout << "Enter product name to update: ";
    cin.ignore();
    getline(cin, name);
    StockItem* item = branches[branchName].findStockItem(name);
    if (!item) {
        cout << "Item not found.\n";
        return;
    }

    cout << "Enter new quantity: ";
    cin >> item->quantity;
    cout << "Enter new price: ";
    cin >> item->price;
    cout << "Item updated successfully.\n";
}

void deleteStockItem() {
    string branchName, name;
    cout << "Enter branch name: ";
    cin >> branchName;
    if (branches.find(branchName) == branches.end()) {
        cout << "Branch not found.\n";
        return;
        saveStockToFile();
    }

    cout << "Enter product name to delete: ";
    cin.ignore();
    getline(cin, name);

    if (branches[branchName].removeStockItem(name)) {
        cout << "Item removed successfully.\n";
    }
    else {
        cout << "Item not found.\n";
    }
}

void viewStaffSchedules() {
    string branchName;
    cout << "Enter branch name: ";
    cin >> branchName;

    if (branches.find(branchName) == branches.end()) {
        cout << "Branch not found. Available branches: Auckland, Wellington, Christchurch\n";
        return;
    }

    cout << "\n=== Staff Schedules for " << branchName << " ===\n";
    branches[branchName].displayStaff();
}

void addStaff() {
    string branchName;
    cout << "Enter branch name: ";
    cin >> branchName;

    if (branches.find(branchName) == branches.end()) {
        cout << "Branch not found. Available branches: Auckland, Wellington, Christchurch\n";
        return;
        saveStaffToFile();
    }

    string name, role, schedule;
    cout << "Enter staff name: ";
    cin.ignore();
    getline(cin, name);

    if (name.empty()) {
        cout << "Staff name cannot be empty.\n";
        return;
    }

    if (!isVaildText(name)) {
        cout << "Invaild staff name! Only alphabetic characters are allowed.\n";
        return;
    }

    cout << "Enter staff role: ";
    getline(cin, role);

    if (!isVaildText(role)) {
        cout << "Invaild staff role! Only alphabetic characters are allowed.\n";
        return;
    }

    cout << "Enter staff schedule: ";
    getline(cin, schedule);

    Staff newStaff(name, role, schedule);
    branches[branchName].addStaff(newStaff);
}

void updateStaff() {
    string branchName;
    cout << "Enter branch name: ";
    cin >> branchName;
    
    if (branches.find(branchName) == branches.end()) {
        cout << "Branch not found.\n";
        return;
        saveStaffToFile();
    }

    cout << "\nCurrent staff in " << branchName << ":\n";
    branches[branchName].displayStaff();

    string staffName;
    cout << "\nEnter staff name to update: ";
    cin.ignore();
    getline(cin, staffName);

    Staff* staff = branches[branchName].findStaff(staffName);
    if (!staff) {
        cout << "Staff member not found.\n";
        return;
    }

    cout << "Current details - Role: " << staff->role << ", Schedule: " << staff->schedule << endl;

    cout << "Enter new role (or press Enter to keep current): ";
    string newRole;
    getline(cin, newRole);
    if (!newRole.empty()) {
        staff->role = newRole;
    }

    cout << "Enter new schedule (or press Enter to keep current): ";
    string newSchedule;
    getline(cin, newSchedule);
    if (!newSchedule.empty()) {
        staff->schedule = newSchedule;
    }

    cout << "Staff member updated successfully!\n";
}

void deleteStaff() {
    string branchName;
    cout << "Enter branch name: ";
    cin >> branchName;

    if (branches.find(branchName) == branches.end()) {
        cout << "Branch not found.\n";
        return;
    }

    cout << "\nCurrent staff in " << branchName << ":\n";
    branches[branchName].displayStaff();

    string staffName;
    cout << "\nEnter staff name to remove: ";
    cin.ignore();
    getline(cin, staffName);

    if (getConfirmation("Are you sure you want to remove this staff member?")) {
        if (branches[branchName].removeStaff(staffName)) {
            cout << "Staff member removed successfully!\n";
            void saveStaffToFile();
        }
        else {
            cout << "Staff member not found.\n";
        }
    }
    else {
        cout << "Removal cancelled.\n";
    }
}

// === STOCK MANAGEMENT SUBMENU ===
void stockManagementMenu() {
    int choice;
    do {
        cout << "\n";
        printSeparator();
        cout << "=== Stock Management ===\n";
        cout << "1. View product stock and low stock alerts\n";
        cout << "2. Add product stock to branch\n";
        cout << "3. Update product stock\n";
        cout << "4. Delete product stock\n";
        cout << "0. Back to Admin Menu\n";
        printSeparator();
        cout << "Enter choice: ";
        while (!(cin >> choice)) {
            cout << "Invalid input. Please enter a number: ";
            clearInput();
        }
        switch (choice) {
        case 1: viewStockLevels(); break;
        case 2: addStockItem(); break;
        case 3: updateStockItem(); break;
        case 4: deleteStockItem(); break;
        case 0: cout << "Returning to Admin Menu...\n"; break;
        default: cout << "Invalid choice. Please try again.\n"; break;
        }
    } while (choice != 0);
}

// === STAFF MANAGEMENT SUBMENU ===
void staffManagementMenu() {
    int choice;
    do {
        cout << "\n";
        printSeparator();
        cout << "=== Staff Management ===\n";
        cout << "1. View staff schedules\n";
        cout << "2. Add staff\n";
        cout << "3. Update staff\n";
        cout << "4. Delete staff\n";
        cout << "0. Back to Admin Menu\n";
        printSeparator();
        cout << "Enter choice: ";
        while (!(cin >> choice)) {
            cout << "Invalid input. Please enter a number: ";
            clearInput();
        }
        switch (choice) {
        case 1: viewStaffSchedules(); break;
        case 2: addStaff(); break;
        case 3: updateStaff(); break;
        case 4: deleteStaff(); break;
        case 0: cout << "Returning to Admin Menu...\n"; break;
        default: cout << "Invalid choice. Please try again.\n"; break;
        }
    } while (choice != 0);
}

// === USER FUNCTIONS ===
void listBranches() {
    cout << "\n=== AOTEAROA TREASURES BRANCHES ===\n";
    for (auto& pair : branches) {
        cout << "- " << pair.first << '\n';
    }
}
void browseBranchStock() {
    string branchName;
    cout << "Enter branch name to browse: ";
    cin >> branchName;
    if (branches.find(branchName) == branches.end()) {
        cout << "Branch not found. Available branches: Auckland, Wellington, Christchurch\n";
        return;
    }
    cout << "\n=== PRODUCTS AT " << branchName << " ===\n";
    branches[branchName].displayStock(false);
}
void buyFromBranch() {
    string branchName;
    cout << "Enter branch name to shop from: ";
    cin >> branchName;
    if (branches.find(branchName) == branches.end()) {
        cout << "Branch not found. Available branches: Auckland, Wellington, Christchurch\n";
        return;
        saveStockToFile();
    }
    while (true) {
        cout << "\n=== SHOPPING AT " << branchName << " ===\n";
        branches[branchName].displayStock(false);
        string productName;
        cout << "\nEnter product name to buy (or 'exit' to finish): ";
        cin.ignore();
        getline(cin, productName);
        if (productName == "exit" || productName == "EXIT") {
            cout << "Thank you for shopping with Aotearoa Treasures!\n";
            return;
        }
        StockItem* item = branches[branchName].findStockItem(productName);
        if (!item) {
            cout << "Product not found. Please check the spelling and try again.\n";
            continue;
        }
        if (item->quantity == 0) {
            cout << "Sorry, this product is out of stock.\n";
            continue;
        }
        int quantity;
        cout << "Enter quantity to buy (available: " << item->quantity << "): ";
        while (!(cin >> quantity) || quantity <= 0) {
            cout << "Invalid quantity. Please enter a positive number: ";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }
        if (quantity > item->quantity) {
            cout << "Sorry, only " << item->quantity << " units available.\n";
            continue;
        }
        double totalCost = quantity * item->price;
        cout << fixed << setprecision(2)
            << "\n=== PURCHASE SUMMARY ===\n"
            << "Product: " << productName << "\n"
            << "Quantity: " << quantity << "\n"
            << "Unit Price: $" << item->price << "\n"
            << "Total Cost: $" << totalCost << "\n";
        if (getConfirmation("Confirm purchase?")) {
            item->quantity -= quantity;
            cout << "\n*** PURCHASE SUCCESSFUL! ***\n";
            cout << "Thank you for your purchase!\n";
            cout << "Remaining stock of " << productName
                << ": " << item->quantity << " units\n";
            if (getConfirmation("Would you like to continue shopping?")) {
                continue;
            }
            else {
                cout << "Thank you for shopping with Aotearoa Treasures!\n";
                return;
            }
        }
        else {
            cout << "Purchase cancelled.\n";
        }
    }
}

// === MENU FUNCTIONS ===
void adminMenu() {
    int choice;
    do {
        cout << "\n";
        printSeparator();
        cout << "=== Admin Menu (" << currentUsername << ") ===\n";
        cout << "1. Promote user to admin\n";
        cout << "2. Staff Management\n";
        cout << "3. Stock Management\n";
        cout << "0. Logout\n";
        printSeparator();
        cout << "Enter choice: ";

        while (!(cin >> choice)) {
            cout << "Invalid input. Please enter a number: ";
            clearInput();
        }

        switch (choice) {
        case 1: promoteUserToAdmin(); break;
        case 2: staffManagementMenu(); break;
        case 3: stockManagementMenu(); break;
        case 0: cout << "Logging out...\n"; break;
        default: cout << "Invalid choice. Please try again.\n"; break;
        }
    } while (choice != 0);
}

void userMenu() {
    int choice;
    do {
        cout << "\n";
        printSeparator();
        cout << "=== User Menu (" << currentUsername << ") ===\n";
        cout << "1. List branches\n";
        cout << "2. Browse branch products\n";
        cout << "3. Buy product\n";
        cout << "0. Logout\n";
        printSeparator();
        cout << "Enter choice: ";

        while (!(cin >> choice)) {
            cout << "Invalid input. Please enter a number: ";
            clearInput();
        }

        switch (choice) {
        case 1: listBranches(); break;
        case 2: browseBranchStock(); break;
        case 3: buyFromBranch(); break;
        case 0: cout << "Logging out...\n"; break;
        default: cout << "Invalid choice. Please try again.\n"; break;
        }
    } while (choice != 0);
}

void loginUser() {
    string username, password;
    vector<User> users = loadUsers();
    int attempts = 0;
    const int maxAttempts = 3;

    while (attempts < maxAttempts) {
        cout << "Please enter username:\n";
        cin >> username;
        cout << "Please enter the password:\n";
        cin >> password;

        currentUsername = username;

        // Check for hardcoded admin first
        if (username == "admin" && password == "admin123") {
            cout << "Login successful!\n";
            cout << "Welcome Admin: " << username << endl;
            currentUserRole = "Admin";
            adminMenu();
            return;
        }

        // This will be checking for the registered users
        for (const auto& user : users) {
            if (user.username == username && user.password == password) {
                cout << "Login successful!\n";
                currentUserRole = user.role;

                if (user.role == "Admin") {
                    cout << "Welcome admin: " << username << endl;
                    adminMenu();
                }
                else {
                    cout << "Welcome user: " << username << endl;
                    userMenu();
                }
                return;
            }
        }
        attempts++;
        if (attempts < maxAttempts) {
            cout << "Username or password incorrect.\n";
        }
        else {
            cout << "Too many failed attempts. Exiting login.\n";
        }
    }
}

int main() {
    initializeBranches();

    int choice;
    while (true) {
        cout << "\n*******Welcome to Aotearoa Treasures*******\n";
        cout << "1. Register\n2. Login\n0. Exit\nPlease enter your choice:\n";
        cin >> choice;
        switch (choice) {
        case 1:
            registerUser();
            break;
        case 2:
            loginUser();
            break;
        case 0:
            cout << "Goodbye!\n";
            return 0;
        default:
            cout << "Invalid option.\n";
        }
    }
    return 0;
}
